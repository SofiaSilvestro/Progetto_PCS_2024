@startuml

package DFNLibrary <<Node>> #line:DarkSlateGrey;line.bold;back:Azure
{

class Fractures << (F, orchid) >> #line:Navy;line.bold;back:aliceblue
{

+ NumberFractures : unsigned int 
+ Id : unsigned int
+ Vertices : vector<Matrix<double, 3, Dynamic>>
+ Plane : vector<array<double, 4>>

' fine classe Fractures
}

class Traces << (T, violet) >> #line:Navy;line.bold;back:aliceblue
{

+ NumberTraces : unsigned int
+ FracturesId : vector<array<unsigned int, 2>>
+ Vertices : vector<array<Vector3d, 2>> 
+ Tips : vector<array<bool, 2>>

' fine classe Traces
} 
Fractures *-[#Chocolate]-* Traces


class TEST << (T, Yellow) >> #line:OrangeRed;line.dashed;back:Snow
{
..TestDistanze..

+ TraDuePunti
+ TraQuadrilateri

..TestBaricentro..

+ Quadrilatero

..TestRetteEPiani..

+ EqPiano3Punti
+ RettaTraPiani
+ RettaTraVertici
+ AscissaCurvilinea

' fine TEST
}
Traces -left-> TEST
Fractures -left-> TEST

class FUNZIONI << (F, YellowGreen) >> #line:Red;line.dashed;back:Snow
{

+ bool importazione (&filename, &frattura)
+ array<double, 4> EqPiano(&frattura, &Id)
+ double distanza_al_quadrato (&vec1, &vec2)
+ Vector3d baricentro (&frattura, &Id)
+ bool valuta_intersezione (&frattura, &Idfrac1, &Idfrac2)
+ array<double,6> Retta_tra_piani (&frattura, &idfrac1, &idfrac2)
+ array<double,6> Retta_per_due_vertici_della_frattura (&frattura, &id, &vert1, &vert2)
+ Vector2d alpha_di_intersezione (&r_intersez, &r_fratt)
+ void caricamento_dati (&traccia, &frattura)
+ bool compare (arr1, arr2)
+ void esportazione(&traccia, &frattura)

}
Traces -right-> FUNZIONI
Fractures -down-> FUNZIONI

' fine namespace DFNLibrary
} 


@enduml