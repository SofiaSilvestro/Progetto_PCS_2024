@startuml

package DFNLibrary <<Node>> #line:DarkSlateGrey;line.bold;back:LightYellow
{

class Fractures << (F, orchid) >> #line:Navy;line.bold;back:aliceblue
{

+ NumberFractures : unsigned int 
+ IdF : unsigned int
+ Vertices : map<unsigned int, Matrix<double, 3, Dynamic>>
+ Plane : map<unsigned int, array<double, 4>>
+ vector<double> Lenght

..NonMemberFunctions..

+ bool importazione(const string &filename, Fractures1 &frattura)
+ double distanza_al_quadrato(Vector3d& v1, Vector3d& v2)
+ void esportazione(Traces& traccia, Fractures& frattura)
+ bool valuta_intersezione (Fractures& frattura, unsigned int& Id1, unsigned int& Id2)
+ array<double,6> Retta_tra_piani(Fractures& frattura, unsigned int& id1, unsigned int& id2)
+ array<double,6> Retta_per_due_vertici_della_frattura(Fractures& frattura, unsigned int& id, unsigned int& i,unsigned int& j)
+ Vector2d alpha_di_intersezione(array<double,6> r_intersez,array<double,6> r_fratt)
+ Vector3d Punto_intersezione_rette_piano_frattura(array<double,6> r_intersez, array<double,6> r_fratt)
+ bool Controllo_puntoIntersezione_segmentoFrattura (Fractures& frattura, unsigned int& id, unsigned int& i,unsigned int& j, Vector3d pt)

__TESTFRAC__



' fine classe Fractures
}

class Traces << (T, violet) >> #line:Navy;line.bold;back:aliceblue
{

+ IdT : unsigned int
+ FracturesId : map<unsigned int, array<unsigned int, 2>> 
+ Vertices : map<unsigned int, array<Vector3d,2>> 
+ Tips : map<unsigned int, array<bool,2>> 

__TESTTRAC__



' fine classe Traces
} 

Fractures --|> Traces


' fine namespace DFNLibrary
} 





@enduml